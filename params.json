{"name":"Betterbusses","tagline":"A better bus schedule for RIT for a more enlightened time.","body":"#Better Busses\r\n\r\nA better bus schedule for RIT for a more enlightened time.\r\n\r\n##About\r\n\r\nBus schedules can be hard and convluted to read. When you want to get from pont\r\nA to point B, you are required to inherently know which bus route that applies\r\nto, and you're supposed to inherently know what all the little symols mean, and\r\nif you don't understand, you need to hunt down the key and are forced to figure\r\nit out.\r\n\r\nComputers today can do all the hard work for you, leaving you with the right\r\ninformation needed to get from pont A to point B at any time you wish.\r\n\r\nBetter Busses is aimed to convert RIT's bus schedules first into a \r\ncomputer-friendly format, so that they may present the information to humans\r\nin a friendly maner.\r\n\r\n##Bus Schedule Input Notation\r\n\r\nThe bus schedules are input in a `.schedule` file that adheres to the following \r\nsyntax definitions.\r\n\r\n- Commands are on a line-by-line basis. Commands end with a new-line.\r\n- Comments are any line that begin with a `#` character. There are no \r\n  multi-line comments.\r\n- Commands can input data or set the variables for data.\r\n    - `:set` commands\r\n        - `:set days` is followed by the days that the input data will apply to\r\n        - `:set stops` is followed by the stops for the current route in order they\r\n          are visited. The stops are visited in a cicular maner for input data, and\r\n          individual stops are delinated by the `>` character.\r\n        - `:set route` is followed by the name of the route for input data. If a \r\n          `:` character follows the route name, the route will be followed by the\r\n          stops for the route (this is a kind of short-hand/syntatic-sugar).\r\n    - The `:q` command will print the resulting JSON represenation of the bus\r\n      schedule and quit the program.\r\n    - All other commands are data input for times. Delinated by `>` characters,\r\n      bus stop times are in order of the stops and will loop around the stops\r\n      in circles.\r\n        - If a stop time is in the format `STOP_NAME - TIME`, it represents a\r\n          special case stop inserted between the two normally occuring stops.\r\n        - If a stop is to be skipped, place nothing between the `>` characters.\r\n\r\nThe following is an example of a `.schedule` file.\r\n\r\n    # Imaginary Bus Schedule\r\n    :set route Candy Land Route\r\n    :set stops Gumdrop Forrest > Chocolate River > Candy Mountain\r\n    :set days Monday,Tuesday,Wednesday,Thursday,Friday\r\n    # these times depart from the Gumdrop Forest, go to the Chocolate River, \r\n    # arrive at Candy Mountain, and then return to the Gumdrop Forest\r\n    9:00 > 9:20 > 9:30 > 9:50\r\n    :set days Saturday,Sunday,Holiday\r\n    # these times depart from the Gumdrop Forest, make a special stop at the Caremel Lake,\r\n    # go to the Chocolate River, arrive at Candy Mountain, and then return to the Gumdrop Forest\r\n    10:00 > Caremel Lake - 10:10 > 10:20 > 10:30 > 10:50\r\n    :set route McDonalds World : Burgers > Fries > Salads\r\n    :set days All\r\n    11:00 > 11:10 > 11:20 > 11:30 > 11:40 > 11:50 > 12:00P\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}